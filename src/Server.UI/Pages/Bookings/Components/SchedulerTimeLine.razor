<!-- HotelBookingCalendar.razor -->
@using CleanArchitecture.Blazor.Application.Features.Rooms.DTOs
@inject IJSRuntime JSRuntime

<div id="dp"></div>

<script type="text/javascript">
    var booking = [];
    var rooms = [];
    
     function myFunction() {
        console.log(rooms);
        console.log(booking);
        alert("ButtonClick");
    }  
    
    var dp = new DayPilot.Scheduler("dp", {
        theme: 'scheduler_vgrand',
    });
    dp.rowHeaderColumns = [
        { text: 'Name', display: "name" },
        { text: 'Status', display: "status" },
        { text: 'Type', display: "type" }
    ];
    
    dp.startDate = new DayPilot.Date().addDays(-1);
    dp.days = 365;
    dp.scale = "Day";
    dp.timeHeaders = [
        { groupBy: "Month", format: "MMM yyyy" },
        { groupBy: "Cell", format: "d" }
    ];

    dp.eventHeight = 30;

    dp.contextMenu = new DayPilot.Menu({items: [
        {text:"Edit", onClick: function(args) { dp.events.edit(args.source); } },
        {text:"Delete", onClick: function(args) { dp.events.remove(args.source); } },
        {text:"-"},
        {text:"Select", onClick: function(args) { dp.multiselect.add(args.source); } },
    ]});

    dp.treeEnabled = true;
    dp.treePreventParentUsage = true;
    dp.resources = rooms;

    dp.heightSpec = "Max";
    dp.height = 500;

    dp.events.list = booking;

    dp.eventMovingStartEndEnabled = true;
    dp.eventResizingStartEndEnabled = true;
    dp.timeRangeSelectingStartEndEnabled = true;

    // event moving
    dp.onEventMoved = function (args) {
        
        dp.message("Moved: " + args.e.text());
    };

    dp.onEventMoving = function(args) {
        if (args.e.resource() === "A" && args.resource === "B") {  // don't allow moving from A to B
            args.left.enabled = false;
            args.right.html = "You can't move an event from Room 1 to Room 2";

            args.allowed = false;
        }
        else if (args.resource === "B") {  // must start on a working day, maximum length one day
            while (args.start.getDayOfWeek() == 0 || args.start.getDayOfWeek() == 6) {
                args.start = args.start.addDays(1);
            }
            args.end = args.start.addDays(1);  // fixed duration
            args.left.enabled = false;
            args.right.html = "Events in Room 2 must start on a workday and are limited to 1 day.";
        }

        if (args.resource === "C") {
            var except = args.e.data;
            var events = dp.rows.find(args.resource).events.all();

            var start = args.start;
            var end = args.end;
            var overlaps = events.some(function(item) {
                return item.data !== except && DayPilot.Util.overlaps(item.start(), item.end(), start, end);
            });

            while (overlaps) {
                start = start.addDays(1);
                end = end.addDays(1);

                overlaps = events.some(function(item) {
                    return item.data !== except && DayPilot.Util.overlaps(item.start(), item.end(), start, end);
                });
            }

            if (args.start !== start) {
                args.start = start;
                args.end = end;

                args.left.enabled = false;
                args.right.html = "Start automatically moved to " + args.start.toString("d MMMM, yyyy");
            }

        }

    };

    // event resizing
    dp.onEventResized = function (args) {
        dp.message("Resized: " + args.e.text());
    };

    // event creating
    @* dp.onTimeRangeSelected = function (args) {
        DayPilot.Modal.prompt("New event name:", "New Event").then(function(modal) {
            dp.clearSelection();
            var name = modal.result;
            if (!name) return;
            var e = new DayPilot.Event({
                start: args.start,
                end: args.end,
                id: DayPilot.guid(),
                resource: args.resource,
                text: name
            });
            dp.events.add(e);
            dp.message("Created");
        });
    }; *@


    dp.onEventMove = function(args) {
        if (args.ctrl) {
            var newEvent = new DayPilot.Event({
                start: args.newStart,
                end: args.newEnd,
                text: "Copy of " + args.e.text(),
                resource: args.newResource,
                id: DayPilot.guid()  // generate random id
            });
            dp.events.add(newEvent);

            // notify the server about the action here

            args.preventDefault(); // prevent the default action - moving event to the new location
        }
    };
    
    function initTimeline(bookingList, roomList) {
        bookingList.map(b => {
            b.rooms.map(r => {
                var book;
                var duration = Math.floor(Math.random() * 6) + 1; // 1 to 6
                var durationDays = Math.floor(Math.random() * 6) + 1; // 1 to 6
                var start = Math.floor(Math.random() * 6) + 2; // 2 to 7
                book = {
                    start: new DayPilot.Date(b.checkInDate.substring(0, 19)),
                    end: new DayPilot.Date(b.checkOutDate.substring(0, 19)),
                    id: DayPilot.guid(),
                    resource: r.id,
                    text: "Event " + (r.id + 1),
                    bubbleHtml: "Event " + (r.id + 1),
                    barColor: barColor(r.id),
                    barBackColor: barBackColor(r.id)
                };
                booking.push(book);
                
            });
        });
        
        roomList.map(e => {
            var room;
            room = {
                name: e.name,
                id: e.id,
                status: e.status,
                type: e.roomType.name,
            }
            rooms.push(room);
        });

        rooms = roomList,
        dp.init();
        dp.scrollTo("2018-05-01");
    }

    function barColor(i) {
        var colors = ["#3c78d8", "#6aa84f", "#f1c232", "#cc0000"];
        return colors[i % 4];
    }
    function barBackColor(i) {
        var colors = ["#a4c2f4", "#b6d7a8", "#ffe599", "#ea9999"];
        return colors[i % 4];
    }
    
</script>

  <!-- bottom -->
<script type="text/javascript">
$(document).ready(function() {
    var url = window.location.href;
    var filename = url.substring(url.lastIndexOf('/')+1);
    if (filename === "") filename = "index.html";
    $(".menu a[href='" + filename + "']").addClass("selected");
});
 
</script>

@code {
    [Parameter]
    public HashSet<RoomDto> Rooms { get; set; }

    [Parameter]
    public List<Booking> Bookings { get; set; }

    private DateTime StartDate { get; set; }

    protected override async Task OnInitializedAsync()
    {
        @* await JSRuntime.InvokeVoidAsync("initData", Bookings, Rooms); *@
    }
    protected override async void OnAfterRender(bool firstRender) {
        if(firstRender){
            await JSRuntime.InvokeVoidAsync("initTimeline", Bookings, Rooms);
        }
    }
    private async Task ButtonClick() {
        await JSRuntime.InvokeVoidAsync("myFunction");
    }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        // Calculate start date of the month
        StartDate = DateTime.UtcNow.AddDays(-DateTime.UtcNow.Day + 1);
    }

    private IEnumerable<DateTime> GetDatesInMonth(DateTime startDate)
    {
        var endDate = startDate.AddMonths(1).AddDays(-1);
        for (var date = startDate; date <= endDate; date = date.AddDays(1))
        {
            yield return date;
        }
    }

    private double CalculateEventOffset(DateTime startTime)
    {
        var days = (startTime - StartDate).TotalDays;
        return days * 100; // Adjust this value to fit your layout
    }

    private double CalculateEventWidth(DateTime startTime, DateTime endTime)
    {
        var duration = endTime - startTime;
        return duration.TotalDays * 100; // Adjust this value to fit your layout
    }
}
