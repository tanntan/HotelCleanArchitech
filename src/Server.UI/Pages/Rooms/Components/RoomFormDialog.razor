@using ResizeMode = SixLabors.ImageSharp.Processing.ResizeMode
@using Severity = Severity
@using Size = SixLabors.ImageSharp.Size
@using Color = Color
@using Image = SixLabors.ImageSharp.Image
@using SixLabors.ImageSharp.Processing
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Formats.Png
@using CleanArchitecture.Blazor.Application.Features.Rooms.Commands.AddEdit
@using CleanArchitecture.Blazor.Domain.Common.Enums
@using CleanArchitecture.Blazor.Server.UI.Services.JsInterop

@inherits MudComponentBase

@inject IJSRuntime JS
@inject IStringLocalizer<Rooms> L
@inject IValidationService Validator
@inject IUploadService UploadService
@inject IMediator Mediator

<MudDialog>
    <DialogContent>
        <MudForm Model="@Model" @ref="@_form" Validation="@(Validator.ValidateValue(Model))">
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField Label="@L["Room Name"]" @bind-Value="Model.Name"
                                  For="@(() => Model.Name)"
                                  Required="true"
                                  RequiredError="@L["room name is required!"]">
                    </MudTextField>
                </MudItem>
                <MudItem>
                    <div class="d-flex flex-row gap-4 mb-2">
                        <MudFileUpload T="IReadOnlyList<IBrowserFile>" Multiple
                                       SuppressOnChangeWhenInvalid="true"
                                       @bind-Files="Model.UploadPictures" OnFilesChanged="UploadFiles" For="@(() => Model.UploadPictures)">
                            <ButtonTemplate>
                                <MudLoadingButton Loading="@_uploading" HtmlTag="label" Disabled="_uploading"
                                                  Variant="Variant.Filled"
                                                  Color="Color.Primary"
                                                  for="@context">
                                    @(L["Upload picture"])
                                </MudLoadingButton>
                            </ButtonTemplate>
                        </MudFileUpload>
                    </div>
                    <MudText Typo="Typo.body2">@L["The recommended size for uploading images is 640X320"]</MudText>
                    <div class="d-fex">
                        @if (Model.RoomImages is not null)
                        {
                            foreach (var img in Model.RoomImages)
                            {
                                <div style="float:left; position: relative; width: 160px; height: 80px; margin: 10px;">
                                    <MudTooltip Delay="500" Text="@img.Name">
                                        <MudImage ObjectFit="ObjectFit.Cover" Height="80" Width="160" Src="@img.Url" Alt="@img.Name" Elevation="25" Class="mr-2 rounded-lg"/>
                                    </MudTooltip>
                                    <div style="position: absolute;top: 0px;left: 0px; z-index: 2990;">
                                        <MudIconButton OnClick="@(() => PreviewImage(img.Url, Model.RoomImages))" Icon="@Icons.Material.Filled.Image" aria-label="preview" Color="Color.Info" Size="MudBlazor.Size.Small"></MudIconButton>
                                    </div>
                                    <div style="position: absolute;top: 0px;right: 0px; z-index: 2990;">
                                        <MudIconButton OnClick="@(() => DeleteImage(img))" Icon="@Icons.Material.Filled.Delete" aria-label="delete" Color="Color.Error" Size="MudBlazor.Size.Small"></MudIconButton>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@ConstantString.Cancel</MudButton>
        <MudLoadingButton Loading="@_saveingnew" OnClick="SaveAndNew">@ConstantString.SaveAndNew</MudLoadingButton>
        <MudLoadingButton Loading="@_saving" OnClick="Submit">@ConstantString.Save</MudLoadingButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private MudDialogInstance MudDialog { get; set; } = default!;

    [EditorRequired] [Parameter] public AddEditRoomCommand Model { get; set; } = default!;

    [Parameter] public Action? Refresh { get; set; }

    private MudForm? _form;
    private bool _saving;
    private bool _saveingnew;
    private bool _uploading;

    private const long MaxAllowedSize = 3145728;

    private async Task DeleteImage(RoomImage picture)
    {
        if (Model.RoomImages != null)
        {
            var parameters = new DialogParameters<ConfirmationDialog>
            {
                { x => x.ContentText, $"{L["Are you sure you want to erase this image?"]}" }
            };
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, DisableBackdropClick = true };
            var dialog = DialogService.Show<ConfirmationDialog>($"{L["Erase imatge"]}", parameters, options);
            var state = await dialog.Result;

            if (!state.Canceled)
            {
                Model.RoomImages.Remove(picture);
            }
        }
    }

    private async Task PreviewImage(string url, IEnumerable<RoomImage> images)
    {
        await new Fancybox(JS).PreviewRoomImage(url, images);
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        try
        {
            _uploading = true;
            var list = new List<RoomImage>();
            foreach (var file in e.GetMultipleFiles())
            {
                try
                {
                    var filestream = file.OpenReadStream(GlobalVariable.MaxAllowedSize);
                    var imgStream = new MemoryStream();
                    await filestream.CopyToAsync(imgStream);
                    imgStream.Position = 0;
                    using (var outStream = new MemoryStream())
                    {
                        using (var image = Image.Load(imgStream))
                        {
                            image.Mutate(
                                i => i.Resize(new ResizeOptions { Mode = ResizeMode.Crop, Size = new Size(640, 320) }));
                            image.Save(outStream, PngFormat.Instance);
                            var filename = file.Name;
                            var fi = new FileInfo(filename);
                            var ext = fi.Extension;
                            var result = await UploadService.UploadAsync(new UploadRequest(Guid.NewGuid() + ext, UploadType.Product, outStream.ToArray()));
                            list.Add(new RoomImage { Name = filename, Size = outStream.Length, Url = result });
                        }
                    }
                }
                catch (Exception ex)
                {
                    Snackbar.Add($"{ex.Message}", Severity.Error);
                }
            }

            Snackbar.Add(L["Upload pictures successfully"], Severity.Info);

            if (Model.RoomImages is null)
                Model.RoomImages = list;
            else
                Model.RoomImages.AddRange(list);
        }
        finally
        {
            _uploading = false;
        }
    }

    private async Task Submit()
    {
        try
        {
            _saving = true;
            await _form!.Validate().ConfigureAwait(false);

            if (!_form!.IsValid)
                return;

            var result = await Mediator.Send(Model);

            if (result.Succeeded)
            {
                MudDialog.Close(DialogResult.Ok(true));
                Snackbar.Add(ConstantString.SaveSuccess, Severity.Info);
            }
            else
            {
                Snackbar.Add(result.ErrorMessage, Severity.Error);
            }
        }
        finally
        {
            _saving = false;
        }
    }

    private async Task SaveAndNew()
    {
        try
        {
            _saveingnew = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
                return;
            var result = await Mediator.Send(Model);
            if (result.Succeeded)
            {
                Snackbar.Add(ConstantString.SaveSuccess, Severity.Info);
                Refresh?.Invoke();
                Model = new AddEditRoomCommand();
            }
            else
            {
                Snackbar.Add(result.ErrorMessage, Severity.Error);
            }
        }
        finally
        {
            _saveingnew = false;
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

}